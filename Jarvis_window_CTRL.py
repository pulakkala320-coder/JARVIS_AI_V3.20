import asyncio
import logging
import sys

try:
    from livekit.agents import function_tool
except ImportError:
    def function_tool(func): 
        return func







try:
    import win32gui
    import win32con
except ImportError:
    win32gui = None
    win32con = None

try:
    import pygetwindow as gw
except ImportError:
    gw = None

try:
    import pyautogui
except ImportError:
    pyautogui = None

# Encoding рдФрд░ Logger рд╕реЗрдЯрдЕрдк
sys.stdout.reconfigure(encoding='utf-8') 
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------------
# рд╡рд┐рдВрдбреЛ рдлреЛрдХрд╕ рдХрд░рдиреЗ рдХрд╛ рдпреВрдЯрд┐рд▓рд┐рдЯреА
# -------------------------
async def focus_window(title_keyword: str) -> bool:
    if not gw:
        logger.warning("тЪа pygetwindow рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдЧрд╛рдпрдм рд╣реИ")
        return False

    await asyncio.sleep(1.5)  # рд╡рд┐рдВрдбреЛ рдЦреБрд▓рдиреЗ рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░
    title_keyword = title_keyword.lower().strip()

    for window in gw.getAllWindows():
        if title_keyword in window.title.lower():
            if window.isMinimized:
                window.restore()
            window.activate()
            return True
    return False

# -------------------------
# рдРрдк рдЦреЛрд▓рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди (Start Menu рд╕реЗ)
# -------------------------
@function_tool()
async def open_app(app_title: str) -> str:
    """
    рдХрд┐рд╕реА рднреА рдРрдк рдХреЛ Start Menu рд╕реЗ рдЦреЛрд▓реЛ (path рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ)ред
    рдЙрджрд╛рд╣рд░рдг:
    - "open facebook"
    - "notepad рдЦреЛрд▓реЛ"
    """
    app_title = app_title.lower().strip()

    try:
        if pyautogui:
            pyautogui.press("win")          # Start Menu рдЦреЛрд▓реЛ
            await asyncio.sleep(1)
            pyautogui.typewrite(app_title)  # рдРрдк рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЛ
            await asyncio.sleep(1.2)
            pyautogui.press("enter")        # рдПрдВрдЯрд░ рджрдмрд╛рдУ
            await asyncio.sleep(2)
            focused = await focus_window(app_title)
            return f"ЁЯЪА '{app_title}' рдЦреЛрд▓рд╛ рдЧрдпрд╛ред Focus: {focused}"
        else:
            return "тЪа pyautogui рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдЧрд╛рдпрдм рд╣реИ"
    except Exception as e:
        return f"тЭМ '{app_title}' рдЦреЛрд▓рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: {e}"

# -------------------------
# рдРрдк рдмрдВрдж рдХрд░рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
# -------------------------
closed_apps = []  # рдмрдВрдж рд╣реБрдП apps рдХреЛ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП

@function_tool()
async def close_app(window_title: str) -> str:
    """
    рдРрдк рдХреЛ рдЙрд╕рдХреЗ window title рд╕реЗ рдмрдВрдж рдХрд░реЛред
    рдЙрджрд╛рд╣рд░рдг:
    - "close notepad"
    - "chrome рдмрдВрдж рдХрд░реЛ"
    """
    if not win32gui:
        return "тЪа win32gui рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдЧрд╛рдпрдм рд╣реИ"

    closed = []

    def enumHandler(hwnd, _):
        if win32gui.IsWindowVisible(hwnd):
            title = win32gui.GetWindowText(hwnd)
            if window_title.lower() in title.lower():
                win32gui.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0)
                closed.append(title)
                closed_apps.append(window_title)  # рд░реАрдУрдкрди рдХреЗ рд▓рд┐рдП рд╕реЗрд╡ рдХрд░реЛ

    win32gui.EnumWindows(enumHandler, None)

    if closed:
        return f"ЁЯЫС '{window_title}' рдмрдВрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ред"
    else:
        return f"тЪа '{window_title}' рдирд╛рдо рдХреА рдХреЛрдИ рд╡рд┐рдВрдбреЛ рдирд╣реАрдВ рдорд┐рд▓реАред"

# -------------------------
# рдлрд╝реЛрд▓реНрдбрд░ рдпрд╛ рдлрд╝рд╛рдЗрд▓ рдЦреЛрд▓реЛ
# -------------------------
@function_tool()
async def folder_file(path: str) -> str:
    """
    рдХрд┐рд╕реА рднреА рдлрд╝реЛрд▓реНрдбрд░ рдпрд╛ рдлрд╝рд╛рдЗрд▓ рдХреЛ Explorer рдореЗрдВ рдЦреЛрд▓реЛред
    рдЙрджрд╛рд╣рд░рдг:
    - "open downloads"
    - "folder D:\\Movies"
    """
    import os
    import subprocess

    try:
        if os.path.exists(path):
            subprocess.Popen(f'explorer "{path}"')
            return f"ЁЯУВ '{path}' рдЦреЛрд▓рд╛ рдЧрдпрд╛ред"
        else:
            return f"тЪа '{path}' рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИред"
    except Exception as e:
        return f"тЭМ '{path}' рдЦреЛрд▓рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: {e}"

# -------------------------
# рдЖрдЦрд┐рд░реА рдмрдВрдж рд╣реБрдЖ рдРрдк рдлрд┐рд░ рд╕реЗ рдЦреЛрд▓реЛ
# -------------------------
@function_tool()
async def reopen_last_app() -> str:
    """
    рд╕рдмрд╕реЗ рдЖрдЦрд┐рд░реА рдмрдВрдж рдХрд┐рдП рдЧрдП рдРрдк рдХреЛ рдлрд┐рд░ рд╕реЗ рдЦреЛрд▓реЛред
    """
    if not closed_apps:
        return "тЪа рдХреЛрдИ рднреА рдмрдВрдж рд╣реБрдЖ рдРрдк рдирд╣реАрдВ рдорд┐рд▓рд╛ред"

    last_app = closed_apps[-1]  # рдЖрдЦрд┐рд░реА рд╡рд╛рд▓рд╛ рдРрдк
    msg = await open_app(last_app)
    return f"ЁЯФД рдЖрдЦрд┐рд░реА рдмрдВрдж рд╣реБрдЖ рдРрдк рдлрд┐рд░ рд╕реЗ рдЦреЛрд▓рд╛ рдЧрдпрд╛: {last_app}\n{msg}"
