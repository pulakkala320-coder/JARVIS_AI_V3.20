
# youtube_controls.py
import os
import asyncio
import webbrowser
import urllib.parse
import requests
from livekit.agents import function_tool

# -------------------------------------------
# ЁЯФС YouTube Data API endpoint
# -------------------------------------------
API_URL = "https://www.googleapis.com/youtube/v3/search"

# -------------------------------------------
# ЁЯЖФ рдкрд╣рд▓реЗ рд╡реАрдбрд┐рдпреЛ рдХрд╛ videoId рдирд┐рдХрд╛рд▓реЛ (YouTube API рд╕реЗ)
# -------------------------------------------
def _first_video_id(api_key: str, query: str) -> str | None:
    """
    ЁЯСЙ рдХрд╛рдо: рджрд┐рдП рдЧрдП рд╕рд░реНрдЪ рдЯреЗрдХреНрд╕реНрдЯ рд╕реЗ рдкрд╣рд▓рд╛ рд╡реАрдбрд┐рдпреЛ рдвреВрдБрдврдирд╛ рдФрд░ рдЙрд╕рдХрд╛ videoId рд▓реМрдЯрд╛рдирд╛
    тЪЩя╕П рддрд░реАрдХрд╛: YouTube Data API (search.list) рдХреЛ рдХреЙрд▓ рдХрд░рдирд╛
    """
    params = {
        "part": "snippet",          # рдХреМрди рд╕рд╛ рдбреЗрдЯрд╛ рдЪрд╛рд╣рд┐рдП
        "q": query,                 # рдХреНрдпрд╛ рдвреВрдБрдврдирд╛ рд╣реИ
        "type": "video",            # рд╕рд┐рд░реНрдл рд╡реАрдбрд┐рдпреЛ рдЪрд╛рд╣рд┐рдП
        "maxResults": 1,            # рдкрд╣рд▓рд╛ рд░рд┐рдЬрд╝рд▓реНрдЯ
        "regionCode": "IN",         # рдЗрдВрдбрд┐рдпрд╛ рд░реАрдЬрд╝рди
        "safeSearch": "none",       # рд╕реЗрдл рд╕рд░реНрдЪ рдСрдл
        "relevanceLanguage": "hi",  # рд╣рд┐рдВрджреА рд░рд┐рд▓реЗрд╡реЗрдВрд╕
        "key": api_key,             # ЁЯФ┤ рдЬрд░реВрд░реА: API key
    }
    r = requests.get(API_URL, params=params, timeout=10)
    r.raise_for_status()
    items = r.json().get("items", [])
    return items[0]["id"]["videoId"] if items else None

# -------------------------------------------
# ЁЯФО рд╕рд┐рд░реНрдл рд╕рд░реНрдЪ рдкреЗрдЬ рдЦреЛрд▓реЛ (Fallback/Manual)
# -------------------------------------------
@function_tool
async def video_search_karo(query: str):
    """ЁЯФН рдпреВрдЯреНрдпреВрдм рдкрд░ рдХреЛрдИ рднреА рд╡реАрдбрд┐рдпреЛ рдЦреЛрдЬреЛ (рд╕рд░реНрдЪ рдкреЗрдЬ рдЦреБрд▓реЗрдЧрд╛)"""
    search = urllib.parse.quote(query)
    url = f"https://www.youtube.com/results?search_query={search}"
    await asyncio.to_thread(webbrowser.open, url)
    return f"ЁЯФО '{query}' рдХреЗ рд▓рд┐рдП рд╕рд░реНрдЪ рдЦреЛрд▓рд╛ рдЧрдпрд╛ред"

# -------------------------------------------
# тЦ╢я╕П рдкрд╣рд▓рд╛ рд╡реАрдбрд┐рдпреЛ рдСрдЯреЛтАСрдкреНрд▓реЗ рдХрд░реЛ (Watch URL)
# -------------------------------------------
@function_tool
async def play_youtube(query: str):
    """тЦ╢я╕П рдпреВрдЯреНрдпреВрдм рдкрд░ рдкрд╣рд▓рд╛ рд╡реАрдбрд┐рдпреЛ рдЪрд▓рд╛рдУ (рдСрдЯреЛтАСрдкреНрд▓реЗ)"""
    api_key = os.getenv("YOUTUBE_API_KEY", "").strip()

    # рдЕрдЧрд░ API key рдирд╣реАрдВ рд╣реИ рддреЛ рд╕рд░реНрдЪ рдкреЗрдЬ рдкрд░ рднреЗрдЬ рджреЛ
    if not api_key:
        search = urllib.parse.quote(query)
        url = f"https://www.youtube.com/results?search_query={search}"
        await asyncio.to_thread(webbrowser.open, url)
        return f"тД╣я╕П API key рдирд╣реАрдВ рдорд┐рд▓рд╛, рдЗрд╕рд▓рд┐рдП рд╕рд░реНрдЪ рдЦреЛрд▓рд╛ рдЧрдпрд╛: '{query}'"

    # API рд╕реЗ рдкрд╣рд▓рд╛ videoId рдирд┐рдХрд╛рд▓реЛ
    vid = await asyncio.to_thread(_first_video_id, api_key, query)
    if not vid:
        search = urllib.parse.quote(query)
        url = f"https://www.youtube.com/results?search_query={search}"
        await asyncio.to_thread(webbrowser.open, url)
        return f"тЪая╕П рдХреЛрдИ рд╡реАрдбрд┐рдпреЛ рдирд╣реАрдВ рдорд┐рд▓рд╛, рдЗрд╕рд▓рд┐рдП рд╕рд░реНрдЪ рдЦреЛрд▓рд╛ рдЧрдпрд╛: '{query}'"

    # Direct watch URL рдЦреЛрд▓реЛ рддрд╛рдХрд┐ рддреБрд░рдВрдд рдкреНрд▓реЗ рд╣реЛ
    watch_url = f"https://www.youtube.com/watch?v={vid}"
    await asyncio.to_thread(webbrowser.open, watch_url)
    return f"ЁЯО╡ '{query}' рдХрд╛ рдкрд╣рд▓рд╛ рд╡реАрдбрд┐рдпреЛ рдЕрдм рдЪрд▓ рд░рд╣рд╛ рд╣реИред"
